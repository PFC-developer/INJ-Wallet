import Head from 'next/head';
import {
    Box,
    Divider,
    Grid,
    Heading,
    Text,
    Stack,
    Container,
    Link,
    Button,
    Flex,
    Icon,
    useColorMode,
    useColorModeValue
} from '@chakra-ui/react';
import {BsFillMoonStarsFill, BsFillSunFill} from 'react-icons/bs';
import {Product, Dependency, WalletSection} from '../components';
import {dependencies, products} from '../config';
import {MouseEventHandler} from "react";
import {BigNumberInBase} from "@injectivelabs/utils";
import {CosmosChainId} from "@injectivelabs/ts-types";
import {KeplrWallet as InjKeplrWallet} from '@injectivelabs/wallet-ts/dist/keplr'
import {
    MsgSend,
    BaseAccount,
    ChainRestAuthApi,
    ChainRestTendermintApi,
    DEFAULT_TIMEOUT_HEIGHT, createTransaction, DEFAULT_STD_FEE, TxGrpcClient
} from "@injectivelabs/sdk-ts";

const onDoSend: MouseEventHandler = async (e) => {
    e.preventDefault();
    // @ts-ignore
    const accounts = await window.keplr        ?.getOfflineSigner(CosmosChainId.Injective)
        .getAccounts()
    const amount = {
        amount: new BigNumberInBase(0.01).toWei().toFixed(),
        denom: "inj",
    };
    const keplrWallet = new InjKeplrWallet(CosmosChainId.Injective)
    const endpoints = await keplrWallet.getChainEndpoints()
    const chainRestAuthApi = new ChainRestAuthApi(
        endpoints.rest,
    )
    const accountDetailsResponse = await chainRestAuthApi.fetchAccount(
        accounts[0].address
    )
    const baseAccount = BaseAccount.fromRestApi(accountDetailsResponse)
    const accountDetails = baseAccount.toAccountDetails()
    const chainRestTendermintApi = new ChainRestTendermintApi(
        endpoints.rest,
    )
    const latestBlock = await chainRestTendermintApi.fetchLatestBlock()
    const latestHeight = latestBlock.header.height
    const timeoutHeight = new BigNumberInBase(latestHeight).plus(
        DEFAULT_TIMEOUT_HEIGHT,
    )
    const msg = MsgSend.fromJSON({
        amount,
        srcInjectiveAddress:  accounts[0].address,
        dstInjectiveAddress:  accounts[0].address,
    });
    const msgs = [msg]
    const key = await keplrWallet.getKey()
    const signer = await keplrWallet.getOfflineSigner()
    /** Prepare the Transaction **/
    const { txRaw, signDoc } = createTransaction({
        message: msgs.map((m) => m.toDirectSign()),
        memo: 'test',
        fee: DEFAULT_STD_FEE,
        pubKey: Buffer.from(key.pubKey).toString('base64'),
        sequence: baseAccount.sequence,
        timeoutHeight: timeoutHeight.toNumber(),
        accountNumber: baseAccount.accountNumber,
        chainId: CosmosChainId.Injective,
    })

    const signature = await signer.signDirect(accounts[0].address, signDoc)
    txRaw.setSignaturesList([Buffer.from(signature.signature, 'base64')]);

    /** Broadcast the transaction */
    const txGrpc = new TxGrpcClient(endpoints.rpc)
    const response = await txGrpc.broadcast(txRaw)

    if (response.code !== 0) {
        throw new Error(`Transaction failed: ${response.rawLog}`)
    }
    console.log(response.txHash)

    return response.txHash
};

export default function Home() {
    const {colorMode, toggleColorMode} = useColorMode();

    return (
        <Container maxW="5xl" py={10}>
            <Head>
                <title>Create Cosmos App</title>
                <meta name="description" content="Generated by create cosmos app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <Flex justifyContent="end" mb={4}>
                <Button variant="outline" px={0} onClick={toggleColorMode}>
                    <Icon
                        as={colorMode === 'light' ? BsFillMoonStarsFill : BsFillSunFill}
                    />
                </Button>
            </Flex>
            <Box textAlign="center">
                <Heading
                    as="h1"
                    fontSize={{base: '3xl', sm: '4xl', md: '5xl'}}
                    fontWeight="extrabold"
                    mb={3}
                >
                    Create Cosmos App
                </Heading>
                <Heading
                    as="h1"
                    fontWeight="bold"
                    fontSize={{base: '2xl', sm: '3xl', md: '4xl'}}
                >
                    <Text as="span">Welcome to&nbsp;</Text>
                    <Text
                        as="span"
                        color={useColorModeValue('primary.500', 'primary.200')}
                    >
                        CosmosKit + Next.js
                    </Text>
                </Heading>
            </Box>
            <WalletSection/>
            <Grid
                templateColumns={{
                    md: 'repeat(2, 1fr)',
                    lg: 'repeat(3, 1fr)'
                }}
                gap={8}
                mb={14}
            >
                {products.map((product) => (
                    <Product key={product.title} {...product}></Product>
                ))}
            </Grid>
            <Box mb={1}>
                <Stack
                    h="full"
                    minH={36}
                    p={5}
                    spacing={2.5}
                    justifyContent="center"
                    borderRadius={5}
                    boxShadow={useColorModeValue(
                        '0 2px 5px #ccc',
                        '0 1px 3px #727272, 0 2px 12px -2px #2f2f2f'
                    )}
                    _hover={{
                        color: useColorModeValue('purple.600', 'purple.300'),
                        boxShadow: useColorModeValue(
                            '0 2px 5px #bca5e9',
                            '0 0 3px rgba(150, 75, 213, 0.8), 0 3px 8px -2px rgba(175, 89, 246, 0.9)'
                        )
                    }}
                >
                    <Heading fontSize="xl">Test INJ</Heading>
                    <Text>
                        <button onClick={onDoSend}>Button</button>
                    </Text>
                </Stack>
            </Box>
            <Grid templateColumns={{md: '1fr 1fr'}} gap={8} mb={20}>
                {dependencies.map((dependency) => (
                    <Dependency key={dependency.title} {...dependency}></Dependency>
                ))}
            </Grid>
            <Box mb={3}>
                <Divider/>
            </Box>

            <Stack
                isInline={true}
                spacing={1}
                justifyContent="center"
                opacity={0.5}
                fontSize="sm"
            >
                <Text>Built with</Text>
                <Link
                    href="https://cosmology.tech/"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Cosmology
                </Link>
            </Stack>
        </Container>
    );
}
